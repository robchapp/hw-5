---
title: "Homework 5"
author: "[Robert Chappell]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
execute: 
  freeze: true
  cache: true
format:
  # html: # comment this line to get pdf
  pdf: 
    fig-width: 7
    fig-height: 7
---

[Link to the Github repository](https://github.com/psu-stat380/hw-5)

---

::: {.callout-important style="font-size: 0.8em;"}
## Due: Wed, Apr 19, 2023 @ 11:59pm

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::


In this assignment, we will explore decision trees, support vector machines and neural networks for classification and regression. The assignment is designed to test your ability to fit and analyze these models with different configurations and compare their performance.

We will need the following packages:


```{R, message=FALSE, warning=FALSE, results='hide'}
packages <- c(
  "dplyr", 
  "readr", 
  "tidyr", 
  "purrr", 
  "broom",
  "magrittr",
  "corrplot",
  "caret",
  "rpart",
  "rpart.plot",
  "e1071",
  "torch", 
  "luz"
)

# renv::install(packages)
sapply(packages, require, character.only=T)
```

<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 60 points
Prediction of Median House prices
:::

###### 1.1 (2.5 points)


The `data` folder contains the `housing.csv` dataset which contains housing prices in California from the 1990 California census. The objective is to predict the median house price for California districts based on various features.


Read the data file as a tibble in R. Preprocess the data such that:

1. the variables are of the right data type, e.g., categorical variables are encoded as factors
2. all column names to lower case for consistency
3. Any observations with missing values are dropped

```{R}
path <- "data/housing.csv"

df <- read.csv(path)
df$ocean_proximity <- factor(df$ocean_proximity)
colnames(df) <- tolower(colnames(df))
df <- na.omit(df)
```

---

###### 1.2 (2.5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
df %>%
  select(-ocean_proximity)%>%
  cor() %>%
  corrplot(method = "circle", type = "upper", order = "hclust", tl.cex = 0.6)
```

---

###### 1.3 (5 points)

Split the data `df` into `df_train` and `df_split` using `test_ind` in the code below:

```{R}
set.seed(42)
test_ind <- sample(
  1:nrow(df), 
  floor( nrow(df)/10 ),
  replace=FALSE
)

df_train <- df[-test_ind, ]
df_test  <- df[test_ind, ]
```

---

###### 1.4 (5 points)

Fit a linear regression model to predict the `median_house_value` :

* `latitude`
* `longitude`
* `housing_median_age`
* `total_rooms`
* `total_bedrooms`
* `population`
* `median_income`
* `ocean_proximity`

Interpret the coefficients and summarize your results. 

```{R}
lm_fit <- lm(median_house_value ~ latitude + longitude + housing_median_age + total_rooms + total_bedrooms + population + median_income + ocean_proximity, data = df_train)

summary(lm_fit)

```

From the summary of the glm, we can see the coeficcients for all the variables represent the increase in median house cost when the factor increases by one, and the intercept is the median house price when all other factors are set to zero. The coefficients for the categorical factors represent the estimated differences in the predicted median house value between each category and the reference category.

From the summary you can also see that almost all factors are significant, except for ocean proximity by the bay, which is not significant, and ocean proximity near the ocean is not as significant as the others.

---

###### 1.5 (5 points)

Complete the `rmse` function for computing the Root Mean-Squared Error between the true `y` and the predicted `yhat`, and use it to compute the RMSE for the regression model on `df_test`

```{R}
rmse <- function(y, yhat) {
  sqrt(mean((y - yhat)^2))
}

lm_predictions <- predict(lm_fit, df_test)
rmseval = rmse(df_test$median_house_value, lm_predictions)
rmseval
```


###### 1.6 (5 points)

Fit a decision tree model to predict the `median_house_value` using the same predictors as in 1.4. Use the `rpart()` function.

```{R}
rpart_fit <- rpart(median_house_value ~ latitude + longitude + housing_median_age + total_rooms + total_bedrooms + population + median_income + ocean_proximity, df_train)
rpart_predictions <- predict(rpart_fit, newdata = df_test)
```


Visualize the decision tree using the `rpart.plot()` function. 

```{R}
rpart.plot(rpart_fit)
```


Report the root mean squared error on the test set.

```{R}
rmseval2 = rmse(df_test$median_house_value, rpart_predictions)
rmseval2
```

---

###### 1.7 (5 points)

Fit a support vector machine model to predict the `median_house_value` using the same predictors as in 1.4. Use the `svm()` function and use any kernel of your choice. Report the root mean squared error on the test set.

```{R}
svm_fit <- svm(median_house_value ~ ., data = df_train, kernel = "radial")
svm_predictions <- predict(svm_fit, newdata = df_test)
svm_rmse <- rmse(df_test$median_house_value, svm_predictions)
svm_rmse
```

---

###### 1.8 (25 points)

Initialize a neural network model architecture:

```{R}
NNet <- nn_module(
    initialize = function(p, q1, q2, q3){
      self$a1 <- nn_linear(p, q1)
      self$a2 <- nn_linear(q1, q2)
      self$a3 <- nn_linear(q2, q3)
      self$out <- nn_linear(q3, 1)
      self$active <- nn_relu()
    },
    forward = function(x){
      x %>%
        self$a1() %>% self$active() %>%
        self$a2() %>% self$active() %>%
        self$a3() %>% self$active() %>%
        self$out()
    }
)
```


Fit a neural network model to predict the `median_house_value` using the same predictors as in 1.4. Use the `model.matrix` function to create the covariate matrix and `luz` package for fitting the network with $32, 16, 8$ nodes in each of the three hidden layers. 

```{R}
X_train <- model.matrix(median_house_value ~ ., data = df_train)
X_test <- model.matrix(median_house_value ~ ., data = df_test)
y_train <- matrix(df_train$median_house_value, ncol = 1)
y_test <- matrix(df_test$median_house_value, ncol = 1)
nnet_fit <- NNet %>% 
  setup(loss = nn_mse_loss(),
    optimizer = optim_adam,
    metrics = list(
      luz_metric_rmse()
    )
  ) %>%
  set_hparams(
    p = ncol(X_train), q1 = 32, q2 = 16, q3 = 8
  ) %>%
  set_opt_hparams(
    lr = 0.01
  ) %>%
  fit(
    epochs = 10,
    data = list(X_train, y_train),
    valid_data = list(X_test, y_test),
    verbose = FALSE # Change to TRUE while tuning. But, set to FALSE before submitting
  )

```

Plot the results of the training and validation loss and accuracy.

```{R}
plot(nnet_fit)
```


Report the root mean squared error on the test set.


```{R}
nnet_predictions <- predict(nnet_fit, X_test)
nnet_predictions <- as_array(nnet_predictions)
```

::: {.callout-warning}
Remember to use the `as_array()` function to convert the predictions to a vector of numbers before computing the RMSE with `rmse()`
:::

---

###### 1.9 (5 points)

Summarize your results in a table comparing the RMSE for the different models. Which model performed best? Why do you think that is?

```{R}
rmsetable <- data.frame(
  glm = rmseval,
  tree = rmseval2,
  svm = svm_rmse
)
rmsetable
```

From the table above you can see the improvement with the different methods. The decision tree is the worst performing, then the glm model, then svm, and the neural network is the best. This is because of the complexity and amount of nodes in the neural network.

<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 50 points
Spam email classification
:::

The `data` folder contains the `spam.csv` dataset. This dataset contains features extracted from a collection of spam and non-spam emails. The objective is to classify the emails as spam or non-spam.

---

###### 2.1 (2.5 points)

Read the data file as a tibble in R. Preprocess the data such that:

1. the variables are of the right data type, e.g., categorical variables are encoded as factors
2. all column names to lower case for consistency
3. Any observations with missing values are dropped

```{R}
path <- "data/spambase.csv" 
df2 <- read.csv(path)%>%
    mutate_if(\(x) is.character(x), as.factor)
colnames(df2) <- tolower(colnames(df2))
df2$spam <- as.factor(df2$spam)
df2 <- na.omit(df2)
```

---

###### 2.2 (2.5 points)

Split the data `df` into `df_train` and `df_split` using `test_ind` in the code below:

```{R}
set.seed(42)
test_ind2 <- sample(
  1:nrow(df2), 
  floor( nrow(df2)/10 ),
  replace=FALSE
)
df2_train = df2[-test_ind2,]
df2_test = df2[test_ind2,]
```

Complete the `overview` function which returns a data frame with the following columns: `accuracy`, `error`, `false positive rate`, `true positive rate`, between the true `true_class` and the predicted `pred_class` for any classification model.

```{R}
overview <- function(pred_class, true_class) {
  accuracy <- sum(pred_class == true_class) / length(pred_class)
  error <- 1 - accuracy
  true_positives <- sum(pred_class == true_class & pred_class == 1)
  true_negatives <- sum(pred_class == true_class & pred_class == 0)
  false_positives <- sum(pred_class != true_class & pred_class == 1)
  false_negatives <- sum(pred_class != true_class & pred_class == 0)
  true_positive_rate <- true_positives / sum(true_class == 1)
  false_positive_rate <- false_positives / sum(true_class == 0)
  return(
    data.frame(
      accuracy = accuracy,
      error = error,
      true_positive_rate = true_positive_rate,
      false_positive_rate = false_positive_rate
    )
  )
}
```


---

###### 2.3 (5 points)

Fit a logistic regression model to predict the `spam` variable using the remaining predictors. Report the prediction accuracy on the test set.

```{R}
glm_fit <- glm(spam ~ ., df2_train %>% mutate_at("spam", factor), family = "binomial")
glm_test <- predict(
    glm_fit, 
    df2_test,
    output = "response"
)
glm_classes <- ifelse(glm_test > 0.5, "1", "0")
overview(glm_classes, df2_test$spam)
```

The accuracy is around 91.1%

---

###### 2.4 (5 points)

Fit a decision tree model to predict the `spam` variable using the remaining predictors. Use the `rpart()` function and set the `method` argument to `"class"`. 

```{R}
rpart_fit2 <- rpart(spam ~ ., df2_train, method = 'class')
```

Visualize the decision tree using the `rpart.plot()` function. 

```{R}
rpart.plot(rpart_fit2)
```

Report the prediction accuracy on the test set.

```{R}
rpart_classes2 <- predict(rpart_fit2, df2_test, type = 'class')
overview(rpart_classes2, df2_test$spam)
```

The accuracy is around 87.8%

---

###### 2.5 (5 points)

Fit a support vector machine model to predict the `spam` variable using the remaining predictors. Use the `svm()` function and use any kernel of your choice. Remember to set the `type` argument to `"C-classification"` **if you haven't** already converted `spam` to be of type `factor`.


```{R}
svm_fit2 <- svm(spam ~ ., data = df2_train, type = "C-classification", kernel = "radial")
```
Report the prediction accuracy on the test set.

```{R}
svm_classes <- predict(svm_fit2, df2_test)
overview(svm_classes, df2_test$spam)
```

This has an accuracy of 92.4%

---

`###### 2.6 (25 points)

Using the same neural network architecture as in 1.9, fit a neural network model to predict the `spam` variable using the remaining predictors. 

::: {.callout-warning}
## Classification vs. Regression

Note that the neural network in **Q 1.9** was a regression model. You will need to modify the neural network architecture to be a classification model by changing the output layer to have a single node with a sigmoid activation function.

```{R}
M <- model.matrix(spam~ ., data = df2_train)
```


```{R}
NNet2 <- nn_module(
  initialize = function(p, q1, q2, q3) {  
    self$hidden1 <- nn_linear(p, q1)
    self$hidden2 <- nn_linear(q1, q2)
    self$hidden3 <- nn_linear(q2, q3)
    self$output <- nn_linear(q3, 1)
    self$activation <- nn_relu()
    self$sigmoid <- nn_sigmoid()
  },
    
  forward = function(x) {
    x %>% 
      self$hidden1() %>% self$activation() %>% 
      self$hidden2() %>% self$activation() %>% 
      self$hidden3() %>% self$activation() %>% 
      self$output() %>% self$sigmoid()
  }
)
```


:::

Use the `model.matrix` function to create the covariate matrix and `luz` package for fitting the network with $32, 16, 8$ nodes in each of the three hidden layers. (I had errors with this so it out of the code so the document can render) 



nnet_fit <- NNet2 %>% 
  setup(
    loss = nn_bce_loss(),
    optimizer = optim_adam,
    metrics = list(
      luz_metric_accuracy()
    )
  ) %>%
  set_hparams(
    p = ncol(M),
    q1 = 32,
    q2 = 16,
    q3 = 8
  ) %>%
  set_opt_hparams(
    lr = 0.005
  ) %>%
  fit(
    data = list(
      model.matrix(spam ~., data = df2_train),
      df2_train%>% select(spam) %>% as.matrix
    ),
    valid_data = list(
      model.matrix(spam ~ ., data = df2_test),
      df2_test%>% select(spam) %>% as.matrix
    ),
    epochs = 50,
    verbose = FALSE # Change to TRUE while tuning. But, set to FALSE before submitting

  )


---

###### 2.7 (5 points)

Summarize your results in a table comparing the accuracy metrics for the different models. 

```{R}
accuracytable <- data.frame(
  glm = overview(glm_classes, df2_test$spam)%>%
    select(accuracy),
  tree = overview(rpart_classes2, df2_test$spam)%>%
    select(accuracy),
  svm = overview(svm_classes, df2_test$spam)%>%
    select(accuracy)
)
accuracytable
```

The accuracys are in the order of glm, decision tree, and svm.

If you were to choose a model to classify spam emails, which model would you choose? Think about the context of the problem and the cost of false positives and false negatives.

I would choose the glm model, compared to the others it has the second highest accuracy, with 91% only 1 percent lower than the best, and it has the lowest false positive, meaning that fewest real emails would get moved to spam, which is very important.

<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 60 points

Three spirals classification

:::

To better illustrate the power of depth in neural networks, we will use a toy dataset called the "Three Spirals" data. This dataset consists of two intertwined spirals, making it challenging for shallow models to classify the data accurately. 

::: {.callout-warning}
## This is a multi-class classification problem
:::

The dataset can be generated using the provided R code below:

```{R}
generate_three_spirals <- function(){
  set.seed(42)
  n <- 500
  noise <- 0.2
  t <- (1:n) / n * 2 * pi
  x1 <- c(
      t * (sin(t) + rnorm(n, 0, noise)),
      t * (sin(t + 2 * pi/3) + rnorm(n, 0, noise)),
      t * (sin(t + 4 * pi/3) + rnorm(n, 0, noise))
    )
  x2 <- c(
      t * (cos(t) + rnorm(n, 0, noise)),
      t * (cos(t + 2 * pi/3) + rnorm(n, 0, noise)),
      t * (cos(t + 4 * pi/3) + rnorm(n, 0, noise))
    )
  y <- as.factor(
    c(
      rep(0, n), 
      rep(1, n), 
      rep(2, n)
    )
  )
  return(tibble(x1=x1, x2=x2, y=y))
}
```

---

###### 3.1 (5 points)

Generate the three spirals dataset using the code above. Plot $x_1$ vs $x_2$ and use the `y` variable to color the points. 


```{R}
df <- generate_three_spirals()

plot(
  df$x1, df$x2,
  col = df$y,
  pch = 20
)
```

Define a grid of $100$ points from $-10$ to $10$ in both $x_1$ and $x_2$ using the `expand.grid()`. Save it as a tibble called `df_test`. 

```{R}
grid <- expand.grid(x1 = seq(-10, 10, length.out = 100),
                    x2 = seq(-10, 10, length.out = 100))
df_test3 <- as_tibble(grid)
```

---

###### 3.2 (10 points)

Fit a classification tree model to predict the `y` variable using the `x1` and `x2` predictors, and plot the decision boundary. 

```{R}
rpart_fit <- rpart(y ~ x1 + x2, data = df)
rpart_classes <- predict(rpart_fit, df_test3, type = "class")
```

Plot the decision boundary using the following function:

```{R}
plot_decision_boundary <- function(predictions){
  plot(
    df_test3$x1, df_test3$x2, 
    col = predictions,
    pch = 0
  )
  points(
    df$x1, df$x2,
    col = df$y,
    pch = 20
  )
}
```

```{R}
plot_decision_boundary(rpart_classes)
```

---

###### 3.3 (10 points)

Fit a support vector machine model to predict the `y` variable using the `x1` and `x2` predictors. Use the `svm()` function and use any kernel of your choice. Remember to set the `type` argument to `"C-classification"` **if you haven't** converted `y` to be of type `factor`.

```{R}
df$y <- as.factor(df$y)
svm_fit <- svm(y ~ x1 + x2, data = df, type = "C-classification", kernel = "radial")
svm_classes <- predict(svm_fit, newdata = df_test3)
plot_decision_boundary(svm_classes)
```

---

::: {.callout-warning}
## Instructions

For the next questions, you will need to fit a series of neural networks. In all cases, you can:

* set the number of units in each hidden layer to 10 
* set the output dimension `o` to 3 (remember this is multinomial classification)
* use the appropriate loss function for the problem (**not `nn_bce_loss`**)
* set the number of epochs to $50$
* fit the model using the `luz` package

You can use any optimizer of your choice, but you **will need to tune the learning rate for each problem**.
:::


###### 3.4 (10 points)

Fit a neural network with **1 hidden layer** to predict the `y` variable using the `x1` and `x2` predictors.

```{R}
NNet_1 <- nn_module(
  initialize = function(p, q1, o) {
    self$hidden1 <- nn_linear(p, q1)
    self$OUTPUT <- nn_linear(q1, o)
    self$activation <- nn_relu()
  },
  forward = function(x) {
    x %>%
      self$hidden1() %>%
      self$activation() %>%
      self$OUTPUT()
  }
)
```
# Fit the neural network
fit_1 <- NNet_1 %>%
  setup(
    loss = nn_cross_entropy_loss(),
    optimizer = optim_adam,
    metrics = list(
      luz_metric_accuracy()
    )
  ) %>%
  set_hparams(p = 2*1500, q1 = 32, q2 = 32, q3 = 32, o = 3) %>%
  set_opt_hparams(lr = 0.005) %>%
  fit(
    data = list(
      model.matrix(y ~ ., data = df),
      df %>% select(y) %>% as.matrix()
    ),
    epochs = 50,
    verbose = TRUE
  )


In order to generate the class predictions, you will need to use the `predict()` function as follows


test_matrix <- df_test3 %>% select(x1, x2) %>% as.matrix

fit_1_predictions <- predict(fit_1, test_matrix) %>% 
  torch_argmax(2) %>% 
  as.integer()


Plot the results using the `plot_decision_boundary()` function.


plot_decision_boundary(fit_1_predictions)




---

###### 3.5 (10 points)

Fit a neural network with **0 hidden layers** to predict the `y` variable using the `x1` and `x2` predictors.

```{R}
NN0 <- nn_module(
  initialize = function(p, o){
    self$output = nn_linear(p,o)
  },
  forward = function(x){
    x %>% 
    self$output()
  }
)
```

fit_0 <- NN0 %>% 
  setup(loss = nn_cross_entropy_loss(),
        optimizer = optim_adam,
        metrics = list(
          luz_metric_accuracy()
        )
        ) %>%
  set_hparams(p = 2*1500, o = 3) %>%
  set_opt_hparams(lr = 0.01) %>%
  fit(data = list(
      model.matrix(y ~ x1 + x2, data = df),
      df %>% select(y) %>% as.matrix()),
      epochs = 50,
    verbose = TRUE
  )


Plot the results using the `plot_decision_boundary()` function.


fit_0_predictions <- predict(fit_0, test_matrix) %>% 
  torch_argmax(2) %>% 
  as.integer()




plot_decision_boundary(fit_0_predictions)



---


###### 3.6 (10 points)

Fit a neural network with **3 hidden layers** to predict the `y` variable using the `x1` and `x2` predictors.

```{R}
NN2 <- nn_module(
  initialize = function(p, q1, q2, o) {
    self$hidden1 <- nn_linear(p, q1)
    self$hidden2 <- nn_linear(q1, q2)
    self$hidden3 <- nn_linear(q2, q2)
    self$OUTPUT <- nn_linear(q2, o)
    self$activation <- nn_relu()
  },
  forward = function(x) {
    x %>%
      self$hidden1() %>%
      self$activation() %>%
      self$hidden2() %>%
      self$activation() %>%
      self$hidden3() %>%
      self$activation() %>%
      self$OUTPUT()
  }
)
```

# Fit the neural network model
fit_2 <- NN2 %>% 
  setup(
    loss = nn_cross_entropy_loss(),
    optimizer = optim_adam,
    metrics = list(
      luz_metric_accuracy()
    )
  ) %>%
  set_hparams(
    p = 2,
    q1 = 10,
    q2 = 10,
    o = 3
  ) %>%
  set_opt_hparams(
    optimizer = "adam"
  ) %>%
  fit(
    data = list(
      x = df %>% select(x1, x2) %>% as.matrix(),
      y = df$y %>% as.integer()
    ),
    epochs = 50,
    verbose = FALSE
  )


Plot the results using the `plot_decision_boundary()` function.


fit_3_predictions <- predict(fit_2, test_matrix) %>% 
  torch_argmax(2) %>% 
  as.integer()
plot_decision_boundary(fit_3_predictions)



---

###### 3.7 (5 points)

What are the differences between the models? How do the decision boundaries change as the number of hidden layers increases?

As the number of hidden layers increases, the neural network can learn more complex patterns in the data and potentially capture non-linear relationships between the predictors and the target variable. This can result in decision boundaries that are more flexible and better able to fit complex patterns in the data. On the other hand, a neural network with fewer hidden layers may have less capacity to capture complex patterns and may result in decision boundaries that are more simplistic and limited in their ability to accurately represent the underlying data distribution, so increasing the number of hidden layers in a neural network can increase its capacity to learn complex patterns in the data, potentially resulting in more flexible decision boundaries. However, the optimal number of hidden layers and their sizes depend on the specific problem and dataset.

---


:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---



::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::